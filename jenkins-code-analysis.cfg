# -----------------------------------------------------------------------------
# JENKINS BUILDOUT FOR CODE ANALYSIS
# -----------------------------------------------------------------------------
# This buildout needs to be extended by overriding the
# jenkins-test-directories variable. See README.txt for more details.
# -----------------------------------------------------------------------------
[buildout]
parts +=
    pep8-bin
    pep8
    pyflakes-bin
    pyflakes
    flake8
    jenkins-flake8
    ohcount-bin
    ohcount
    clonedigger-bin
    clonedigger
    zptlint-bin
    zptlint
    xmllint
    i18ndude
    i18ndude-bin
    jenkins-jslint
    jenkins-jshint
    jenkins-csslint
    jenkins-utf8-header
    jenkins-code-analysis

jenkins-directory = ${buildout:directory}/parts/jenkins-test

# This value needs to be overridden in the buildout file that extends this
# buildout.
jenkins-test-directories =

# List the pep8 checks that a buildout file that extends this buildout may
# want to ignore. Add them as a comma separated list, i.e. E501,W602,E401
ignore-pep8 =

# A comma-seperated list of CSSLint rules to check (+) or ignore (-)
# Learn more about rules: https://github.com/stubbornella/csslint/wiki
csslint-rules = -ids

# -----------------------------------------------------------------------------
# PEP 8 CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-pep8" script in the bin directory of the
# buildout that runs a PEP 8 code analysis and outputs the results in a
# pep8.log file that the Jenkins violations plugin can process.
# -----------------------------------------------------------------------------
[pep8-bin]
recipe = zc.recipe.egg
eggs =
   pep8
entry-points = pep8-bin=pep8:_main

[pep8]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    if [ -s ${buildout:jenkins-directory}/pep8.log ]; then
      rm ${buildout:jenkins-directory}/pep8.log
      echo "Removing old pep8.log file"
    fi
    if [ -s ${buildout:jenkins-directory}/pep8.log.tmp ]; then
      rm ${buildout:jenkins-directory}/pep8.log.tmp
    fi
    echo "Start PEP 8 code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        find -L ${buildout:directory}/$pkg -regex ".*\.py" | xargs -r bin/pep8-bin --ignore=${buildout:ignore-pep8} -r >> ${buildout:jenkins-directory}/pep8.log.tmp
    done
    cat ${buildout:jenkins-directory}/pep8.log.tmp|sed 's:${buildout:directory}/::' > ${buildout:jenkins-directory}/pep8.log
    echo "Write log to ${buildout:jenkins-directory}/pep8.log"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-pep8
mode = 755


# -----------------------------------------------------------------------------
# PYFLAKES CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-pyflakes" script in the bin directory of the
# buildout that runs a PyFlakes code analyisis and outputs the results in
# a pyflakes.log file that the Jenkins warnings plugin can process.
# -----------------------------------------------------------------------------
[pyflakes-bin]
recipe = zc.recipe.egg
eggs =
   pyflakes
entry-points = pyflakes-bin=pyflakes.scripts.pyflakes:main

[pyflakes]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    if [ -s ${buildout:jenkins-directory}/pyflakes.log ]; then
      rm ${buildout:jenkins-directory}/pyflakes.log
      echo "Removing old pyflakes.log file"
    fi
    if [ -s ${buildout:jenkins-directory}/pyflakes.log.tmp ]; then
      rm ${buildout:jenkins-directory}/pyflakes.log.tmp
    fi
    echo "Start PyFlakes code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        find -L $pkg -regex ".*\.py" | xargs -r bin/pyflakes-bin >> ${buildout:jenkins-directory}/pyflakes.log.tmp
    done
    cat ${buildout:jenkins-directory}/pyflakes.log.tmp|sed 's:${buildout:directory}/::' > ${buildout:jenkins-directory}/pyflakes.log
    echo "Write log to ${buildout:jenkins-directory}/pyflakes.log"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-pyflakes
mode = 755


# -----------------------------------------------------------------------------
# FLAKE8 CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-flake8" script in the bin directory of the
# buildout that runs a PEP8 / PyFlakes code analyisis and outputs the results
# in a flake8.log file that the Jenkins warnings plugin can process.
# -----------------------------------------------------------------------------

[flake8]
recipe = zc.recipe.egg
eggs = flake8
entry-points = flake8=flake8.run:main

[jenkins-flake8]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    if [ -s ${buildout:jenkins-directory}/flake8.log ]; then
      rm ${buildout:jenkins-directory}/flake8.log
      echo "Removing old flake8.log file"
    fi
    if [ -s ${buildout:jenkins-directory}/flake8.log.tmp ]; then
      rm ${buildout:jenkins-directory}/flake8.log.tmp
    fi
    echo "Start Flake8 code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        find -L $pkg -regex ".*\.py" | xargs -r bin/flake8 --max-complexity=10 >> ${buildout:jenkins-directory}/flake8.log.tmp
    done
    cat ${buildout:jenkins-directory}/flake8.log.tmp|sed 's:${buildout:directory}/::' > ${buildout:jenkins-directory}/flake8.log
    echo "Write log to ${buildout:jenkins-directory}/flake8.log"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-flake8
mode = 755


# -----------------------------------------------------------------------------
# PYLINT CODE ANALYSIS
# -----------------------------------------------------------------------------
# XXX: Commented out for now. Pylint consumes just too much resources.
#[pylint-bin]
#recipe = zc.recipe.egg
#eggs = logilab.pylintinstaller
#extra-paths = ${instance:location}/lib/python
#entry-points = pylint-bin=pylint.lint:Run
#arguments = sys.argv[1:]
#arguments = [
#    '--output-format=parseable',
#    '--zope=y',
#    '--reports=y',
#    '--disable-msg=E0611,F0401,W0232,E1101,C0103,C0111,R0201,W0201,R0911,R0904#,F0220,E1103,R0901,E0211,E0213,E1002,W0622',
#    '--generated-members=objects',
#    ] + sys.argv[1:]

# Disable messages:
#
# E0611: No name %r in module %r. Used when a name cannot be found in a module.
# F0401: Unable to import %r (%s). Used when pylint has been unable to import a module.
# W0232: Class has no __init__ method. Used when a class has no __init__ method, neither its parent classes.
# C0103: Invalid name "%s" (should match %s). Used when the name doesn't match the regular expression associated to its type (constant, variable, class...).
# C0111: Message Missing docstring Description Used when a module, function, class or method has no docstring. Some special methods like init don't necessary require a docstring. Explanationâ€¦
# R0201: Method could be a function
# W0201: Attribute %r defined outside __init__
# R0911: Too many return statements (%s/%s)

# E0211: Method has no argument
#        - Reason: raises an error on zope.interface definitions
# E0213 Method should have "self" as first argument
#       - Reason: raises an error on zope.interface definitions
# E1121 Too many positional arguments for function call
#       - Reason: ???
# E1002 Use super on an old style class
#       - Reason: super(CommentsViewlet, self).update() raises an error
# W0622 total_comments: Redefining built-in 'object'
#       - Reason: top level def function will not work (e.g. for catalog indexers)
# ...
# See http://pylint-messages.wikidot.com/all-messages for a full list.
#
#
#[pylint]
#recipe = collective.recipe.template
#input = inline:
#    #!/bin/sh
#    if [ -s pylint.log ]; then
#      rm pylint.log
#      echo "Removing old pylint.log file"
#    fi
#    echo "Start pylint"
#    PACKAGES="${buildout:jenkins-test-directories}"
#    for pkg in $PACKAGES
#    do
#        echo "Running pylint for $pkg"
#        find -L $pkg -regex ".*\.py" | xargs -r bin/pylint >> pylint.log
#    done
#    echo "finish"
#output = ${buildout:directory}/bin/jenkins-code-analysis-pylint
#mode = 755


# -----------------------------------------------------------------------------
# CLONEDIGGER CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-clonedigger" script in the bin directory of
# the buildout...
# -----------------------------------------------------------------------------
[clonedigger-bin]
recipe = zc.recipe.egg
eggs =
   clonedigger

[clonedigger]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    report=${buildout:jenkins-directory}/xml-clonedigger
    if [ -d $report ]; then
      echo "Old clonedigger xml reports removed"
      rm -rf $report
    fi
    echo "Start CloneDigger code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        mkdir -p $report/$pkg
        ${buildout:directory}/bin/clonedigger --cpd-output -o $report/$pkg/clonedigger.xml ${buildout:directory}/$pkg
    done
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-clonedigger
mode = 755


# ----------------------------------------------------------------------------
# OHCOUNT
# ----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-ohcount" script in the bin directory of the
# buildout that runs, ohcount, a source code line counter. This requires
# ohcount to be installed on the server (see
# http://pypi.python.org/pypi/ohconvert for more information.)
# The results can be included into Jenkins with the SLOCCount plugin:
# https://wiki.jenkins-ci.org/display/JENKINS/SLOCCount+Plugin
#   $ sudo apt-get install ohcount
# ----------------------------------------------------------------------------
[ohcount-bin]
recipe = zc.recipe.egg
eggs = ohconvert

[ohcount]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    if [ -s ${buildout:jenkins-directory}/sloccount.sc ]; then
      rm ${buildout:jenkins-directory}/sloccount.sc
      echo "Removing old sloccount.sc file"
    fi
    echo "Start OHCount code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        ${buildout:directory}/bin/ohconvert $pkg >> ${buildout:jenkins-directory}/sloccount.sc
    done
    echo "Write log to ${buildout:jenkins-directory}/sloccount.sc"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-ohcount
mode = 755


# -----------------------------------------------------------------------------
# XML LINT CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-xmllint" script in the bin directory of the
# buildout. This requires xmllint to be installed on the system.
# -----------------------------------------------------------------------------
[xmllint]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    command -v xmllint >/dev/null 2>&1 || {
        echo >&2 "XMLLint not found!";
        echo "Skip XMLLint code analysis. Please make sure XMLLint is installed on your machine.";
        exit 1;
    }
    if [ -e ${buildout:jenkins-directory}/xmllint.log ]; then
      echo "Removing existing xmllint.log file"
      rm ${buildout:jenkins-directory}/xmllint.log
    fi
    echo "Start XMLLint code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        find -L $pkg -name *.xml | xargs -r xmllint --noout 2>> ${buildout:jenkins-directory}/xmllint.log >> ${buildout:jenkins-directory}/xmllint-errors.log
        find -L $pkg -name *.zcml | xargs -r xmllint --noout 2>> ${buildout:jenkins-directory}/xmllint.log >> ${buildout:jenkins-directory}/xmllint-errors.log
    done
    if [ -s ${buildout:jenkins-directory}/xmllint-errors.log ]; then
        echo "Errors were found:"
        cat ${buildout:jenkins-directory}/xmllint-errors.log
        echo "Errors were written to xmllint-errors.log"
        exit 1;
    else
      echo "No errors found"
    fi
    echo "Write log to ${buildout:jenkins-directory}/xmllint.log"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-xmllint
mode = 755


# -----------------------------------------------------------------------------
# ZPT LINT CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-zptlint" script in the bin directory of the
# buildout...TODO
# -----------------------------------------------------------------------------
[zptlint-bin]
recipe = zc.recipe.egg
eggs =
   zptlint
entry-points = zptlint-bin=zptlint:run

[zptlint]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    if [ -e ${buildout:jenkins-directory}/zptlint.log ]; then
      echo "Old zptlint.log file removed"
      rm ${buildout:jenkins-directory}/zptlint.log
    fi
    echo "Start ZPTLint code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        find -L $pkg -regex ".*\.[cz]?pt" | xargs -r bin/zptlint-bin >> ${buildout:jenkins-directory}/zptlint.log
    done
    echo "Write log to ${buildout:jenkins-directory}/zptlint.log"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-zptlint
mode = 755


# -----------------------------------------------------------------------------
# JAVASCRIPT CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-jslint" script in the bin directory of the
# buildout that runs a jslint based code analysis on all javascript files.
#
# This requires jslint to be installed manually on the server.
#   $ sudo apt-get install nodejs npm
#   $ sudo npm install -g jslint
# -----------------------------------------------------------------------------
[jenkins-jslint]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    command -v jslint >/dev/null 2>&1 || {
        echo >&2 "JSLint not found!";
        echo "Skip JSLint code analysis. Please make sure JSLint is installed on your machine.";
        exit 1;
    }
    if [ -e ${buildout:jenkins-directory}/jslint.log ]; then
      echo "Old jslint.log file removed"
      rm ${buildout:jenkins-directory}/jslint.log
    fi
    echo "Start jslint code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        find -L $pkg -regex ".*\.[cz]?js" | xargs -r jslint --jslint-reporter >> ${buildout:jenkins-directory}/jslint.log
    done
    echo "Write log to ${buildout:jenkins-directory}/jslint.log"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-jslint
mode = 755


# -----------------------------------------------------------------------------
# JAVASCRIPT CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-jshint" script in the bin directory of the
# buildout that runs a jshint based code analysis on all javascript files.
# see: http://www.jshint.com/options/
#
# jslint does not return xml format, so we switched to jshint
#
# This requires jshint to be installed manually on the server.
#   $ sudo apt-get install nodejs npm
#   $ sudo npm install -g jshint
# -----------------------------------------------------------------------------
[jenkins-jshint]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    command -v jshint >/dev/null 2>&1 || {
        echo >&2 "jshint not found!";
        echo "Skip jshint code analysis. Please make sure jshint is installed on your machine.";
        exit 1;
    }
    if [ -e ${buildout:jenkins-directory}/jshint.log ]; then
      echo "Old jshint.log file removed"
      rm ${buildout:jenkins-directory}/jshint.log
    fi
    report=${buildout:jenkins-directory}/xml-jshint
    if [ -d $report ]; then
      echo "Old jshint xml reports removed"
      rm -rf $report
    fi

    echo "Start jshint code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        mkdir -p $report/$pkg
        for jsfile in `find -L $pkg -regex ".*\.js" | xargs -r `; do
            jshint >> ${buildout:jenkins-directory}/jshint.log
            # XXX: dollar{jsfile##*/} does not work in template recipe
            jsfilename=`echo $jsfile | awk -F\/ '{ print $NF }'`
            jshint --jslint-reporter $jsfile > $report/$pkg/$jsfilename.xml
        done
    done

    done
    echo "Write log to ${buildout:jenkins-directory}/jshint.log"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-jshint
mode = 755


# -----------------------------------------------------------------------------
# CSS CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-csslint" script in the bin directory of the
# buildout that runs a jshint based code analysis on all css files.
#
# This requires jshint to be installed manually on the server.
#   $ sudo apt-get install nodejs npm
#   $ sudo npm install -g csslint
#
# XXX: CSSLint outputs "csslint: No files specified." which breaks violations
# plugin. It should return xml on --format=lint-xml as jshint does...
# -----------------------------------------------------------------------------
[jenkins-csslint]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    command -v csslint >/dev/null 2>&1 || {
        echo >&2 "CSSLint not found!";
        echo "Skip CSSLint code analysis. Please make sure CSSLint is installed on your machine.";
        exit 1;
    }
    if [ -e ${buildout:jenkins-directory}/csslint.log ]; then
      echo "Old csslint.log file removed"
      rm ${buildout:jenkins-directory}/csslint.log
    fi
    report=${buildout:jenkins-directory}/xml-csslint
    if [ -d $report ]; then
      echo "Old CSSLint xml reports removed"
      rm -rf $report
    fi
    echo "Start csslint code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        mkdir -p $report/$pkg
        for cssfile in `find -L $pkg -regex ".*\.css" | xargs -r `; do
            csslint --rules=${buildout:csslint-rules} $cssfile >> ${buildout:jenkins-directory}/csslint.log
            # XXX: dollar{cssfile##*/} does not work in template recipe
            cssfilename=`echo $cssfile | awk -F\/ '{ print $NF }'`
            csslint --format=lint-xml --rules=${buildout:csslint-rules} $cssfile > $report/$pkg/$cssfilename.xml
        done
    done
    echo "Write log to ${buildout:jenkins-directory}/csslint.log"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-csslint
mode = 755


# -----------------------------------------------------------------------------
# TRANSLATION CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-translations" script in the bin directory
# of the buildout that runs a code analysis on all templates to find
# untranslated strings.
# -----------------------------------------------------------------------------
[i18ndude-bin]
recipe = zc.recipe.egg
eggs =
   i18ndude
entry-points = i18ndude-bin=zptlint:run

[i18ndude]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    if [ -e ${buildout:jenkins-directory}/i18ndude.log ]; then
      echo "Old i18ndude.log file removed"
      rm ${buildout:jenkins-directory}/i18ndude.log
    fi
    echo "Start translations code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        find -L $pkg -regex ".*\.[cz]?pt" | xargs -r bin/i18ndude find-untranslated >> ${buildout:jenkins-directory}/i18ndude.log
    done
    echo "Write log to ${buildout:jenkins-directory}/i18ndude.log"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-translations
mode = 755


# -----------------------------------------------------------------------------
# PYTHON FILES ENCODING ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis-utf8check" script in the bin directory
# of the buildout that runs a code analysis on all python files to find
# missing coding: utf-8 headers
# -----------------------------------------------------------------------------
[jenkins-utf8-header]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    if [ -e ${buildout:jenkins-directory}/missing-utf8-header.log ]; then
      echo "Old missing-utf8-header.log file removed"
      rm ${buildout:jenkins-directory}/missing-utf8-header.log
    fi
    echo "Start translations code analysis:"
    PACKAGES="${buildout:jenkins-test-directories}"
    for pkg in $PACKAGES
    do
        echo "Analyse $pkg"
        find $pkg -regex ".*\.py" -exec grep -H -E -o -c "coding: utf-8" {} \; | grep 0 | cut -d":" -f1 >> ${buildout:jenkins-directory}/missing-utf8-header.log
    done
    echo "Write log to ${buildout:jenkins-directory}/missing-utf8-header.log"
    echo "Finished."
    echo ""
output = ${buildout:directory}/bin/jenkins-code-analysis-utf8header
mode = 755


# -----------------------------------------------------------------------------
# CODE ANALYSIS
# -----------------------------------------------------------------------------
# Creates a "jenkins-code-analysis" script in the bin directory of the buildout
# that runs all code analysis sections at once.
# -----------------------------------------------------------------------------
[jenkins-code-analysis]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    bin/jenkins-code-analysis-pep8
    bin/jenkins-code-analysis-pyflakes
    bin/jenkins-code-analysis-flake8
    bin/jenkins-code-analysis-ohcount
    bin/jenkins-code-analysis-xmllint
    bin/jenkins-code-analysis-zptlint
    bin/jenkins-code-analysis-jshint
    bin/jenkins-code-analysis-jslint
    bin/jenkins-code-analysis-csslint
    bin/jenkins-code-analysis-translations
    bin/jenkins-code-analysis-clonedigger
    bin/jenkins-code-analysis-utf8header
output = ${buildout:directory}/bin/jenkins-code-analysis
mode = 755
